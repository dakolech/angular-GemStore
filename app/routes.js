// Generated by CoffeeScript 1.7.1
(function() {
  var Product, easyimg, fs, im;

  Product = require('./models/product');

  fs = require('fs');

  im = require('imagemagick');

  easyimg = require('easyimage');

  im.identify.path = './identify.exe';

  im.convert.path = './convert.exe';

  module.exports = function(app) {
    app.get('/api/products', function(req, res) {
      Product.find(function(err, products) {
        if (err) {
          res.send(err);
        }
        res.json(products);
      });
    });
    app.get('/api/products/:product_id', function(req, res) {
      Product.findById(req.params.product_id, function(err, product) {
        if (err) {
          res.send(err);
        }
        res.json(product);
      });
    });
    app.post('/api/products', function(req, res) {
      console.log(req.body.id);
      switch (req.body.what) {
        case 'create':
          console.log('Product created: ' + req.body.name + ', ' + req.body.price + ' id: ' + req.body.id);
          Product.create({
            name: req.body.name,
            price: req.body.price,
            description: req.body.description,
            canPurchase: req.body.canPurchase
          }, function(err, product) {
            if (err) {
              res.send(err);
            }
            Product.find(function(err, products) {
              if (err) {
                res.send(err);
              }
              res.json(products);
            });
          });
          break;
        case 'edit':
          console.log(req.body.editing);
          Product.update({
            _id: req.body.id
          }, {
            editing: req.body.editing
          }, {
            multi: false
          }, function(err, product) {
            if (err) {
              res.send(err);
            }
            Product.find(function(err, products) {
              if (err) {
                res.send(err);
              }
              res.json(products);
            });
          });
          break;
        case 'addReview':
          console.log('Review: ' + req.body.stars + ' stars, ' + req.body.body + ', by ' + req.body.author + ' added to: ' + req.body.id);
          Product.findByIdAndUpdate(req.body.id, {
            $push: {
              reviews: {
                stars: req.body.stars,
                body: req.body.body,
                author: req.body.author
              }
            }
          }, {
            safe: true,
            upsert: true
          }, function(err, product) {
            if (err) {
              res.send(err);
            }
            Product.find(function(err, products) {
              if (err) {
                res.send(err);
              }
              res.json(products);
            });
          });
          break;
        case 'deleteImage':
          Product.findByIdAndUpdate(req.body.id, {
            $pull: {
              images: req.body.name
            }
          }, {
            safe: true,
            upsert: true
          }, function(err, product) {
            if (err) {
              res.send(err);
            }
            Product.find(function(err, products) {
              if (err) {
                res.send(err);
              }
              res.json(products);
            });
          });
          fs.unlink('./public/images/' + req.body.name, function(err) {
            if (err) {
              throw err;
            }
            console.log('successfully deleted images/' + req.body.name);
          });
          fs.unlink('./public/images/thumbs/' + req.body.name, function(err) {
            if (err) {
              throw err;
            }
            console.log('successfully deleted images/thumbs/' + req.body.name);
          });
          fs.unlink('./public/images/gallerySize/' + req.body.name, function(err) {
            if (err) {
              throw err;
            }
            console.log('successfully deleted images/gallerySize/' + req.body.name);
          });
          console.log('Delete image: ' + req.body.name + ' from: ' + req.body.id);
      }
    });
    app.post('/api/images/', function(req, res) {
      console.log("Added image (" + req.files.file.name + ") to " + req.body.id);
      fs.readFile(req.files.file.path, function(err, data) {
        var galleryPath, imageName, newPath, thumbPath;
        imageName = req.files.file.name;
        if (!imageName) {
          console.log("There was an error");
          Product.find(function(err, products) {
            if (err) {
              res.send(err);
            }
            res.json(products);
          });
        } else {
          newPath = './public/images/' + imageName;
          thumbPath = './public/images/thumbs/' + imageName;
          galleryPath = './public/images/gallerySize/' + imageName;
          fs.writeFile(newPath, data, function(err) {
            im.resize({
              srcPath: newPath,
              dstPath: thumbPath,
              height: 100
            }, function(err, stdout, stderr) {
              if (err) {
                throw err;
              }
              console.log('resized image to fit within 200x200px');
            });
            im.resize({
              srcPath: newPath,
              dstPath: galleryPath,
              height: 400
            }, function(err, stdout, stderr) {
              if (err) {
                throw err;
              }
              console.log('resized image to fit within 500x500px');
            });
          });
        }
      });
      Product.findByIdAndUpdate(req.body.id, {
        $push: {
          images: req.files.file.name
        }
      }, {
        safe: true,
        upsert: true
      }, function(err, product) {
        if (err) {
          res.send(err);
        }
        Product.find(function(err, products) {
          if (err) {
            res.send(err);
          }
          res.json(products);
        });
      });
    });
    app.get('/images/:file', function(req, res) {
      var file, img;
      file = req.params.file;
      img = fs.readFileSync("./images/" + file);
      res.writeHead(200, {
        'Content-Type': 'image/jpg'
      });
      res.end(img, 'binary');
    });
    app["delete"]('/api/products/:product_id', function(req, res) {
      Product.remove({
        _id: req.params.product_id
      }, function(err, product) {
        if (err) {
          res.send(err);
        }
        Product.find(function(err, products) {
          if (err) {
            res.send(err);
          }
          res.json(products);
        });
      });
    });
    app.get('*', function(req, res) {
      res.sendfile('./public/index.html');
    });
  };

}).call(this);
